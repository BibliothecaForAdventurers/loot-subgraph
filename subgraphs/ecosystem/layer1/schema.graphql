type _Schema_
  @fulltext(
    name: "search"
    language: en
    algorithm: rank
    include: [
      {
        entity: "Bag"
        fields: [
          { name: "chest" }
          { name: "foot" }
          { name: "hand" }
          { name: "head" }
          { name: "neck" }
          { name: "ring" }
          { name: "waist" }
          { name: "weapon" }
        ]
      }
    ]
  )

type Bag @entity {
  id: ID!
  chest: String!
  foot: String!
  hand: String!
  head: String!
  neck: String!
  ring: String!
  waist: String!
  weapon: String!
  chestSuffixId: Int!
  footSuffixId: Int!
  handSuffixId: Int!
  headSuffixId: Int!
  neckSuffixId: Int!
  ringSuffixId: Int!
  waistSuffixId: Int!
  weaponSuffixId: Int!
  currentOwner: Wallet!
  minted: BigInt!
  manas: [Mana!]! @derivedFrom(field: "lootTokenId")
  manasClaimed: BigInt!
  itemsClaimed: Boolean!
}

type GAdventurer @entity {
  id: ID!
  chest: String!
  foot: String!
  hand: String!
  head: String!
  neck: String!
  ring: String!
  waist: String!
  weapon: String!
  order: String!
  orderColor: String!
  orderCount: String!
  currentOwner: Wallet!
  minted: BigInt!
}

type MLoot @entity {
  id: ID!
  chest: String!
  foot: String!
  hand: String!
  head: String!
  neck: String!
  ring: String!
  waist: String!
  weapon: String!
  currentOwner: Wallet!
  minted: BigInt!
}
type Realm @entity {
  id: ID!
  tokenURI: String!
  rarityScore: BigDecimal!
  rarityRank: BigDecimal!
  currentOwner: Wallet!
  minted: BigInt!
  bridgedOwner: Wallet
}

type Mana @entity {
  id: ID!
  lootTokenId: Bag!
  itemName: String!
  suffixId: Int!
  inventoryId: Int!
  currentOwner: Wallet!
  minted: BigInt!
}

type Item @entity {
  id: ID!
  lootTokenId: Bag!
  itemName: String!
  itemType: String!
  suffix: String
  currentOwner: Wallet!
}

type Dungeon @entity {
  id: ID!
  size: Int!
  layout: Bytes!
  environment: Int!
  numDoors: BigInt!
  numPoints: BigInt!
  name: String!
  svg: String!
  currentOwner: Wallet!
  minted: BigInt!
}

type Wallet @entity {
  id: ID!
  address: Bytes!
  bags: [Bag!] @derivedFrom(field: "currentOwner")
  bagsHeld: BigInt!
  mLoot: [MLoot!] @derivedFrom(field: "currentOwner")
  mLootsHeld: BigInt!
  realms: [Realm!] @derivedFrom(field: "currentOwner")
  realmsHeld: BigInt!
  bridgedRealms: [Realm!] @derivedFrom(field: "bridgedOwner")
  bridgedRealmsHeld: BigInt!
  manas: [Mana!] @derivedFrom(field: "currentOwner")
  manasHeld: BigInt!
  gAdventurers: [GAdventurer!] @derivedFrom(field: "currentOwner")
  gAdventurersHeld: BigInt!
  items: [Item!] @derivedFrom(field: "currentOwner")
  itemsHeld: BigInt!
  dungeons: [Dungeon!] @derivedFrom(field: "currentOwner")
  dungeonsHeld: BigInt!

  joined: BigInt!
}

type Transfer @entity {
  id: ID!
  bag: Bag
  realm: Realm
  mLoot: MLoot
  mana: Mana
  gAdventurer: GAdventurer
  item: [Item!]
  from: Wallet!
  to: Wallet!
  txHash: Bytes!
  timestamp: BigInt!
}
