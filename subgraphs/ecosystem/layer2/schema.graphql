
enum RealmTraitOption {
  regions
  cities
  harbors
  rivers
}
enum ResourceName {
  Wood
  Stone
  Coal
  Copper
  Obsidian
  Silver
  Ironwood
  Cold_Iron
  Gold
  Hartwood
  Diamonds
  Sapphire
  Deep_Crystal
  Ruby
  Ignium
  Ethereal_Silica
  True_Ice
  Twilight_Quartz
  Alchemical_Silver
  Adamantine
  Mithral
  Dragonhide
}
enum Buildings {
  markets
  aqueducts
  castles
  ports
  barracks
  farms
  temples
  shipyard
  fishing_village
}

enum Orders {
    Power 
    Giants
    Titans 
    Skill 
    Perfection
    Brilliance 
    Enlightenment 
    Protection
    Anger 
    Rage 
    Fury 
    Vitriol
    the_Fox 
    Detection 
    Reflection
    the_Twins
}

type RealmBuilding @entity {
  id: ID!
  name: Buildings!
  value: BigInt!
  buildingUpgrades: [BuildingUpgrade!] @derivedFrom(field: "buildingUpgraded")
  realmTrait: RealmTrait!
}

type RealmTrait @entity {
  id: ID!
  name: RealmTraitOption!
  value: Int
  buildings: [RealmBuilding!]!
  realm: Realm!
}

type BuildingUpgrade @entity {
  id: ID!
  address: Wallet!
  buildingUpgraded: RealmBuilding
  timestamp: BigInt!
}
type Resource @entity{
  id: ID!
  name: String
  totalRealms: Int
  stakedRealms: BigInt!
  realms: [RealmResource!]! @derivedFrom(field: "resource")
}

type Realm @entity {
  id: ID!
  currentOwner: Wallet!
  minted: BigInt!
  ageSettled: BigInt
  ageClaimed: BigInt
  name: String
  traits: [RealmTrait!]
  resourceIds: [Int!]!
  resources: [RealmResource!] @derivedFrom(field: "realm")
  wonder: Int
  rarityScore: BigDecimal!
  rarityRank: BigDecimal!
  order: Orders!  
  raidAttacks: BigInt! 
  raidDefends: BigInt!
  raiderRealmResults: [RaidResult!] @derivedFrom(field: "raiderRealm")
  defenderRealmResults: [RaidResult!] @derivedFrom(field: "defenderRealm")
}

type RealmResource @entity {
  id: ID!
  realm: Realm!
  resource: Resource!
  level: BigInt!
  resourceUpgrades: [ResourceUpgrade!] @derivedFrom(field: "realmResourceUpgraded")
}
type ResourceUpgrade @entity {
  id: ID!
  address: Wallet!
  realmResourceUpgraded: RealmResource
  timestamp: BigInt!
}

type RaidResult @entity {
  id: ID!
  result: BigInt
  raider: Wallet!
  defender: Wallet!
  raiderRealm: Realm
  defenderRealm: Realm
  raiderUnitsLost: BigInt
  defenderUnitsLost: BigInt
  resourcesPillaged: [Resource!]
  resourcesValuesPillaged: [BigInt!]
  unitsCaptured: BigInt
  timestamp: BigInt!

}

type Wallet @entity {
  id: ID!
  address: Bytes!
  realms: [Realm!] @derivedFrom(field: "currentOwner")
  realmsHeld: BigInt!
  raidAttacks: BigInt! 
  raidDefends: BigInt!
  raiderResults: [RaidResult!] @derivedFrom(field: "raider")
  defenderResults: [RaidResult!] @derivedFrom(field: "defender")
  resourceUpgradesBuilt: [ResourceUpgrade!] @derivedFrom(field: "address")
  buildingUpgradesBuilt: [BuildingUpgrade!] @derivedFrom(field: "address")
  joined: BigInt!
}

type Transfer @entity {
  id: ID!
  realm: Realm
  from: Wallet!
  to: Wallet!
  txHash: Bytes!
  timestamp: BigInt!
}
